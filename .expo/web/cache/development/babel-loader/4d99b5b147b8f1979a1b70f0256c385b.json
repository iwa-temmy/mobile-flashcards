{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { decks } from \"./_DATA\";\nvar DECKS_STORAGE_KEY = 'MobileFlashcards:decks';\nexport function getData() {\n  return decks;\n}\nexport function getDecks() {\n  var storeResults;\n  return _regeneratorRuntime.async(function getDecks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 3:\n          storeResults = _context.sent;\n\n          if (storeResults === null) {\n            AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks));\n          }\n\n          return _context.abrupt(\"return\", storeResults === null ? decks : JSON.parse(storeResults));\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nexport function getDeck(id) {\n  var storeResults;\n  return _regeneratorRuntime.async(function getDeck$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 3:\n          storeResults = _context2.sent;\n          return _context2.abrupt(\"return\", JSON.parse(storeResults)[id]);\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function saveDeckTitle(title) {\n  return _regeneratorRuntime.async(function saveDeckTitle$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECKS_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            title: title,\n            questions: []\n          }))));\n\n        case 3:\n          _context3.next = 8;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}\nexport function removeDeck(key) {\n  var results, data;\n  return _regeneratorRuntime.async(function removeDeck$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 3:\n          results = _context4.sent;\n          data = JSON.parse(results);\n          data[key] = undefined;\n          delete data[key];\n          AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(data));\n          _context4.next = 13;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n}\nexport function addCardToDeck(title, card) {\n  var deck;\n  return _regeneratorRuntime.async(function addCardToDeck$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(getDeck(title));\n\n        case 3:\n          deck = _context5.sent;\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem());\n\n        case 6:\n          _context5.next = 11;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nexport function resetDecks() {\n  return _regeneratorRuntime.async(function resetDecks$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks)));\n\n        case 3:\n          _context6.next = 8;\n          break;\n\n        case 5:\n          _context6.prev = 5;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.log(_context6.t0);\n\n        case 8:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}","map":{"version":3,"sources":["C:/Users/Dekiller_j/Desktop/MyWorks/mobile-flashcards/utils/_api.js"],"names":["AsyncStorage","decks","DECKS_STORAGE_KEY","getData","getDecks","getItem","storeResults","setItem","JSON","stringify","parse","console","log","getDeck","id","saveDeckTitle","title","mergeItem","questions","removeDeck","key","results","data","undefined","addCardToDeck","card","deck","resetDecks"],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage'\r\nimport {decks} from './_DATA'\r\n\r\nconst DECKS_STORAGE_KEY = 'MobileFlashcards:decks'\r\n\r\nexport function getData(){\r\n    return decks\r\n}\r\n\r\nexport async function getDecks(){\r\n    try {\r\n        const storeResults = await AsyncStorage.getItem(DECKS_STORAGE_KEY)\r\n\r\n        if(storeResults === null){\r\n            AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks))\r\n        }\r\n\r\n        return storeResults === null ? decks : JSON.parse(storeResults)\r\n    }catch(err){\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport async function getDeck(id){\r\n    try{\r\n        const storeResults = await AsyncStorage.getItem(DECKS_STORAGE_KEY)\r\n        \r\n\r\n        return JSON.parse(storeResults)[id]\r\n    }catch(err){\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport async function saveDeckTitle(title){\r\n    try{\r\n        await AsyncStorage.mergeItem(DECKS_STORAGE_KEY, JSON.stringify({\r\n            [title]: {\r\n                title,\r\n                questions: []\r\n            }\r\n        }))\r\n    }catch (err){\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport async function removeDeck(key){\r\n    try {\r\n        const results = await AsyncStorage.getItem(DECKS_STORAGE_KEY)\r\n        const data = JSON.parse(results)\r\n        data[key] = undefined\r\n        delete data[key]\r\n        AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(data))\r\n    }catch (err){\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport async function addCardToDeck(title, card){\r\n    try{\r\n        const deck = await getDeck(title)\r\n\r\n        await AsyncStorage.mergeItem(\r\n        \r\n            )\r\n    }catch (err){\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport async function resetDecks(){\r\n    try{\r\n        await AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks))\r\n    }catch(err){\r\n        console.log(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}