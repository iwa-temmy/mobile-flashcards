{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { RECEIVE_DECKS, ADD_DECK, REMOVE_DECK, ADD_CARD, RESET_STORE } from \"../actions\";\nimport { decks as INITIAL_STATE } from \"../utils/_DATA\";\nexport default function decks() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_DECKS:\n      return _objectSpread(_objectSpread({}, state), action.decks);\n\n    case ADD_DECK:\n      var title = action.title;\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, action.title, {\n        title: title,\n        questions: []\n      }));\n\n    case REMOVE_DECK:\n      return state.filter(function (deck) {\n        return deck.id !== action.id;\n      });\n\n    case ADD_CARD:\n      var deckId = action.deckId,\n          card = action.card;\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, action.deckId, _objectSpread(_objectSpread({}, state[deckId]), {}, {\n        questions: _toConsumableArray(state[deckId].questions).concat(card)\n      })));\n\n    case RESET_STORE:\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Dekiller_j/Desktop/MyWorks/mobile-flashcards/reducers/index.js"],"names":["RECEIVE_DECKS","ADD_DECK","REMOVE_DECK","ADD_CARD","RESET_STORE","decks","INITIAL_STATE","state","action","type","title","questions","filter","deck","id","deckId","card","concat"],"mappings":";;;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,WAAlC,EAA+CC,QAA/C,EAAyDC,WAAzD;AACA,SAASC,KAAK,IAAIC,aAAlB;AAEA,eAAe,SAASD,KAAT,GAAmC;AAAA,MAAnBE,KAAmB,uEAAX,EAAW;AAAA,MAAPC,MAAO;;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,6CACOO,KADP,GAEOC,MAAM,CAACH,KAFd;;AAIJ,SAAKJ,QAAL;AACI,UAAQS,KAAR,GAAkBF,MAAlB,CAAQE,KAAR;AACA,6CACOH,KADP,2BAEKC,MAAM,CAACE,KAFZ,EAEoB;AACZA,QAAAA,KAAK,EAALA,KADY;AAEZC,QAAAA,SAAS,EAAC;AAFE,OAFpB;;AAOJ,SAAKT,WAAL;AACI,aAAOK,KAAK,CAACK,MAAN,CAAa,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACM,EAA7B;AAAA,OAAb,CAAP;;AAEJ,SAAKX,QAAL;AACI,UAAQY,MAAR,GAAwBP,MAAxB,CAAQO,MAAR;AAAA,UAAgBC,IAAhB,GAAwBR,MAAxB,CAAgBQ,IAAhB;AAEA,6CACOT,KADP,2BAEKC,MAAM,CAACO,MAFZ,kCAGWR,KAAK,CAACQ,MAAD,CAHhB;AAIQJ,QAAAA,SAAS,EAAE,mBAAIJ,KAAK,CAACQ,MAAD,CAAL,CAAcJ,SAAlB,EAA6BM,MAA7B,CAAoCD,IAApC;AAJnB;;AAOJ,SAAKZ,WAAL;AACI,aAAOE,aAAP;;AAEJ;AACI,aAAOC,KAAP;AAhCR;AAmCH","sourcesContent":["import { RECEIVE_DECKS, ADD_DECK, REMOVE_DECK, ADD_CARD, RESET_STORE } from '../actions'\r\nimport { decks as INITIAL_STATE } from '../utils/_DATA'\r\n\r\nexport default function decks (state = {}, action){\r\n    switch (action.type){\r\n        case RECEIVE_DECKS:\r\n            return{\r\n                ...state,\r\n                ...action.decks\r\n            }\r\n        case ADD_DECK:\r\n            const { title } = action\r\n            return {\r\n                ...state,\r\n                [action.title]: {\r\n                    title,\r\n                    questions:[]\r\n                }\r\n            }\r\n        case REMOVE_DECK: \r\n            return state.filter((deck) => deck.id !== action.id)\r\n\r\n        case ADD_CARD:\r\n            const { deckId, card} = action\r\n            \r\n            return {\r\n                ...state,\r\n                [action.deckId]: {\r\n                    ...state[deckId],\r\n                    questions: [...state[deckId].questions].concat(card)\r\n                }\r\n            }\r\n        case RESET_STORE:\r\n            return INITIAL_STATE\r\n\r\n        default :\r\n            return state\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}