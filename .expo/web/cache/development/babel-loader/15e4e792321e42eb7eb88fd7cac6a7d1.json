{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dekiller_j\\\\Desktop\\\\MyWorks\\\\mobile-flashcards\\\\components\\\\DeckDetail.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Deck from \"./Deck\";\nimport TouchButton from \"./TouchButton\";\nimport TextButton from \"./TextButton\";\nimport { gray, textGray, green, white, red } from \"../utils/colors\";\nimport { connect } from 'react-redux';\nimport { removeDeck } from \"../actions/index\";\nexport var DeckDetail = function (_Component) {\n  _inherits(DeckDetail, _Component);\n\n  var _super = _createSuper(DeckDetail);\n\n  function DeckDetail() {\n    var _this;\n\n    _classCallCheck(this, DeckDetail);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleDelete = function (id) {\n      _this.props.removeDeck(id);\n\n      _this.props.navigation.goBack();\n    };\n\n    return _this;\n  }\n\n  _createClass(DeckDetail, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return nextProps.deck !== undefined;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var deck = this.props.deck;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 7\n        }\n      }, React.createElement(Deck, {\n        id: deck.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }, React.createElement(Button, {\n        btnStyle: {\n          backgroundColor: white,\n          borderColor: textGray\n        },\n        txtStyle: {\n          color: textGray\n        },\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate('AddCard', {\n            title: deck.title\n          });\n        },\n        title: \"Add Card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }\n      }), \"Add Card\", React.createElement(Button, {\n        btnStyle: {\n          backgroundColor: green,\n          borderColor: white\n        },\n        txtStyle: {\n          color: white\n        },\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate('Quiz', {\n            title: deck.title\n          });\n        },\n        title: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      }), \"Start Quiz\"), React.createElement(TouchableOpacity, {\n        txtStyle: {\n          color: red\n        },\n        onPress: function onPress() {\n          return _this2.handleDelete(deck.title);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }, \"Delete Deck\")));\n    }\n  }]);\n\n  return DeckDetail;\n}(Component);\nDeckDetail.propTypes = {\n  navigation: PropTypes.object.isRequired,\n  removeDeck: PropTypes.func.isRequired,\n  deck: PropTypes.object\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-around',\n    paddingTop: 16,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16,\n    backgroundColor: gray\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state, _ref) {\n  var navigation = _ref.navigation;\n  var title = navigation.getParam('title', 'undefined');\n  var deck = state[title];\n  return {\n    deck: deck\n  };\n};\n\nexport default connect(mapStateToProps, {\n  removeDeck: removeDeck\n})(DeckDetail);","map":{"version":3,"sources":["C:/Users/Dekiller_j/Desktop/MyWorks/mobile-flashcards/components/DeckDetail.js"],"names":["React","Component","PropTypes","Deck","TouchButton","TextButton","gray","textGray","green","white","red","connect","removeDeck","DeckDetail","handleDelete","id","props","navigation","goBack","nextProps","deck","undefined","styles","container","title","backgroundColor","borderColor","color","navigate","propTypes","object","isRequired","func","StyleSheet","create","flex","justifyContent","paddingTop","paddingLeft","paddingRight","paddingBottom","mapStateToProps","state","getParam"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, StyleSheet, TouchableOpacity } from 'react-native';\r\nimport Deck from './Deck';\r\nimport TouchButton from './TouchButton';\r\nimport TextButton from './TextButton';\r\nimport { gray, textGray, green, white, red } from '../utils/colors';\r\nimport { connect } from 'react-redux';\r\nimport { removeDeck } from '../actions/index';\r\n\r\nexport class DeckDetail extends Component {\r\n  static propTypes = {\r\n    navigation: PropTypes.object.isRequired,\r\n    removeDeck: PropTypes.func.isRequired,\r\n    deck: PropTypes.object\r\n  };\r\n  shouldComponentUpdate(nextProps) {\r\n    return nextProps.deck !== undefined;\r\n  }\r\n  handleDelete = id => {\r\n    this.props.removeDeck(id);\r\n    this.props.navigation.goBack();\r\n  };\r\n  render() {\r\n    const { deck } = this.props;\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n        <Deck id={deck.title} />\r\n        <View>\r\n          <Button\r\n            btnStyle={{ backgroundColor: white, borderColor: textGray }}\r\n            txtStyle={{ color: textGray }}\r\n            onPress={() =>\r\n              this.props.navigation.navigate('AddCard', { title: deck.title })\r\n            }\r\n            title='Add Card'\r\n          />\r\n            Add Card\r\n          <Button\r\n            btnStyle={{ backgroundColor: green, borderColor: white }}\r\n            txtStyle={{ color: white }}\r\n            onPress={() =>\r\n              this.props.navigation.navigate('Quiz', { title: deck.title })\r\n            }\r\n            title=''\r\n          />\r\n            Start Quiz\r\n        </View>\r\n        <TouchableOpacity\r\n          txtStyle={{ color: red }}\r\n          onPress={() => this.handleDelete(deck.title)}\r\n        >\r\n          <Text>Delete Deck</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'space-around',\r\n    paddingTop: 16,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    paddingBottom: 16,\r\n    backgroundColor: gray\r\n  }\r\n});\r\n\r\nconst mapStateToProps = (state, { navigation }) => {\r\n  const title = navigation.getParam('title', 'undefined');\r\n  const deck = state[title];\r\n\r\n  return {\r\n    deck\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { removeDeck }\r\n)(DeckDetail);"]},"metadata":{},"sourceType":"module"}